/*
 * Copyright (C) 2007, Guennadi Liakhovetski <lg@denx.de>
 *
 * (C) Copyright 2009-2010 Freescale Semiconductor, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#include <config.h>
#include <asm/arch/mx51.h>
#include "board-nitrogen.h"

.macro print_debug_ch ch
#if 0
	mov	r0,#\ch
	bl	TransmitX
#endif
.endm
/*
 * return soc version
 * 	0x10:  TO1
 *	0x20:  TO2
 *	0x30:  TO3
 */
.macro check_soc_version ret, tmp
.endm

/*
 * L2CC Cache setup/invalidation/disable
 */
.macro init_l2cc
	/* explicitly disable L2 cache */
        mrc 15, 0, r0, c1, c0, 1
        bic r0, r0, #0x2
        mcr 15, 0, r0, c1, c0, 1	//Write Auxiliary Control Register

        /* reconfigure L2 cache aux control reg */
        mov r0, #0xC4                   /* tag/data RAM */
        orr r0, r0, #(1 << 22)|(1 << 23)|(1 << 24)          /* disable write allocate, combine, delay */

	mcr 15, 1, r0, c9, c0, 2	//Write L2 Cache Auxiliary Control Register
.endm /* init_l2cc */

/* AIPS setup - Only setup MPROTx registers.
 * The PACR default values are good.*/
.macro init_aips
	/*
	 * Set all MPROTx to be non-bufferable, trusted for R/W,
	 * not forced to user-mode.
	 */
	ldr r1, =AIPS1_BASE_ADDR
	ldr r0, =0x77777777
	str r0, [r1, #0x0]
	str r0, [r1, #0x4]
	ldr r1, =AIPS2_BASE_ADDR
	str r0, [r1, #0x0]
	str r0, [r1, #0x4]
	/*
	 * Clear the on and off peripheral modules Supervisor Protect bit
	 * for SDMA to access them. Did not change the AIPS control registers
	 * (offset 0x20) access type
	 */
.endm /* init_aips */

/* MAX (Multi-Layer AHB Crossbar Switch) setup */
.macro init_max
.endm /* init_max */

/* M4IF setup */
.macro init_m4if
	/* VPU and IPU given higher priority (0x4)
	 * IPU accesses with ID=0x1 given highest priority (=0xA)
	 */
	ldr r1, =M4IF_BASE_ADDR

	ldr r0, =0x00000203
	str r0, [r1, #0x40]

	mov r0, #0x0
	str r0, [r1, #0x44]

	ldr r0, =0x00120125
	str r0, [r1, #0x9C]

	ldr r0, =0x001901A3
	str r0, [r1, #0x48]

/*
	ldr r0, =0x00000a01
	str r0, [r1, #0x48]
	ldr r0, =0x00000404
	str r0, [r1, #0x40]
*/
.endm /* init_m4if */

/* To support 133MHz DDR */
.macro  init_drive_strength
.endm /* init_drive_strength */

/* CPLD on CS5 setup */
.macro init_debug_board
.endm /* init_debug_board */

#define IPU_CM_REG_BASE		0x5E000000
#define IPU_CONF		0x000
#define IPU_DISP_GEN		0x0C4
#define IPU_CH_DB_MODE_SEL0	0x150
#define IPU_CH_DB_MODE_SEL1	0x154
#define IPU_CH_TRB_MODE_SEL0	0x178
#define IPU_CH_TRB_MODE_SEL1	0x17c

#define IPU_IDMAC_BASE		0x5e008000
#define IDMAC_CONF		0x000
#define IDMAC_CH_EN_1		0x004
#define IDMAC_CH_EN_2		0x008
#define IDMAC_WM_EN_1		0x01C
#define IDMAC_WM_EN_2		0x020
.macro init_disable_ipu
	mov	r1,#IPU_CM_REG_BASE
	ldr	r0,[r1, #IPU_DISP_GEN]
	bic	r0, r0, #(3 << 24)	//clear DI0/DI1 counter release
	str	r0,[r1, #IPU_DISP_GEN]

	mov	r0, #0
	str	r0,[r1, #IPU_CONF]	//disable DI0/DI1
	
	add	r2, r1, #IPU_IDMAC_BASE - IPU_CM_REG_BASE
	str	r0, [r2, #IDMAC_CH_EN_1]
	str	r0, [r2, #IDMAC_CH_EN_2]
	str	r0, [r2, #IDMAC_WM_EN_1]
	str	r0, [r2, #IDMAC_WM_EN_2]

	str	r0, [r1, #IPU_CH_DB_MODE_SEL0]
	str	r0, [r1, #IPU_CH_DB_MODE_SEL1]
	str	r0, [r1, #IPU_CH_TRB_MODE_SEL0]
	str	r0, [r1, #IPU_CH_TRB_MODE_SEL1]
.endm

.macro pll_op_mfd_mfn r_pll, dp_op, dp_mfd, dp_mfn
	mov r0, #\dp_op
	str r0, [\r_pll, #PLL_DP_OP]
	str r0, [\r_pll, #PLL_DP_HFS_OP]

	mov r0, #\dp_mfd
	str r0, [\r_pll, #PLL_DP_MFD]
	str r0, [\r_pll, #PLL_DP_HFS_MFD]

	mov r0, #\dp_mfn
	str r0, [\r_pll, #PLL_DP_MFN]
	str r0, [\r_pll, #PLL_DP_HFS_MFN]
.endm

.macro start_pll r_pll, dp_ctl
	ldr r0, =\dp_ctl
	str r0, [\r_pll, #PLL_DP_CTL] /* Set DPLL ON (set UPEN bit) */
1:	ldr r0, [\r_pll, #PLL_DP_CTL]
	tst r0, #0x1
	beq 1b
.endm

.macro divisor_change_wait r_clk
	/* make sure divider effective */
1:	ldr r0, [\r_clk, #CLKCTL_CDHIPR]
	cmp r0, #0x0
	bne 1b
.endm

#define rPLL1 r4
#define rPLL2 r5
#define rPLL3 r6
#define rClk  r7
.macro init_clock
	ldr rClk, =CCM_BASE_ADDR

        /* Disable IPU and HSC handshake */
	mov r0, #0x00060000
	str r0, [rClk, #CLKCTL_CCDR]

	ldr r0, =0x1fff
	str r0, [rClk,#CLKCTL_CCR]	// Turn on oscillator

waitosc:
	ldr r0, [rClk, #CLKCTL_CSR]
	and r0, r0, #0x22
	cmp r0, #0x22		// wait for Oscillator and FPM ready
	bne waitosc
	print_debug_ch '1'

	ldr	rPLL1, =PLL1_BASE_ADDR
	ldr	rPLL2, =PLL2_BASE_ADDR
	ldr	rPLL3, =PLL3_BASE_ADDR

//disable auto restart
	mov	r0, #0
	str     r0, [rPLL1, #PLL_DP_CONFIG]
	str     r0, [rPLL2, #PLL_DP_CONFIG]
	str     r0, [rPLL3, #PLL_DP_CONFIG]
	print_debug_ch '2'

	/* Gate of clocks to the peripherals first */
	mvn r0, #~0x3FFFFFFF
	str r0, [rClk, #CLKCTL_CCGR0]
	mov r0, #0x0
	str r0, [rClk, #CLKCTL_CCGR1]
	str r0, [rClk, #CLKCTL_CCGR2]
	str r0, [rClk, #CLKCTL_CCGR3]

	mov r0, #0x00030000
	str r0, [rClk, #CLKCTL_CCGR4]
	ldr r0, =0x00FFF030
	str r0, [rClk, #CLKCTL_CCGR5]
	mov r0, #0x00000300
	str r0, [rClk, #CLKCTL_CCGR6]

	/* Make sure to switch the DDR away from PLL 1 */
	ldr r2, [rClk, #CLKCTL_CBCDR]	//keep the initial ddr podf value
	ldr r3, =0x19239145
	str r3, [rClk, #CLKCTL_CBCDR]
	divisor_change_wait rClk

	/* Switch ARM to step clock (clock source 4) */
	ldr r0, [rClk, #CLKCTL_CCSR]
	bic r0,r0,#4			//deselect step clock for glitch free update
	str r0, [rClk, #CLKCTL_CCSR]
	mov r0, #0			//select clock source 4 as source for step clock
	str r0, [rClk, #CLKCTL_CCSR]	
	mov r0, #0x4			//switch arm to step clock
	str r0, [rClk, #CLKCTL_CCSR]
	pll_op_mfd_mfn rPLL1,DP_OP_800,DP_MFD_800,DP_MFN_800
	start_pll rPLL1,DP_CTL_800

	/* Switch ARM back to PLL 1 */
	mov r0, #0
	str r0, [rClk, #CLKCTL_CCSR]

	pll_op_mfd_mfn rPLL3,DP_OP_665,DP_MFD_665,DP_MFN_665
	start_pll rPLL3,DP_CTL_665

	/* Switch peripheral to PLL 3 */
        ldr r0, =0x000010C0
	str r0, [rClk, #CLKCTL_CBCMR]
	orr r0, r3, #1<<25		//[25] 0 -> 1 (periph was pll2, now apm)
	str r0, [rClk, #CLKCTL_CBCDR]
	divisor_change_wait rClk

	pll_op_mfd_mfn rPLL2,DP_OP_665,DP_MFD_665,DP_MFN_665
	start_pll rPLL2,DP_CTL_665

	/* Switch peripheral to PLL2 */
	str r3, [rClk, #CLKCTL_CBCDR]	//[25] 1 -> 0 (periph was apm, now pll2)

	ldr r0, =0x000020C0
	str r0, [rClk, #CLKCTL_CBCMR]

	pll_op_mfd_mfn rPLL3,DP_OP_216,DP_MFD_216,DP_MFN_216
	start_pll rPLL3,DP_CTL_216

	/* Set the platform clock dividers */
	ldr r1, =ARM_BASE_ADDR
	ldr r0, =0x00000725
	str r0, [r1, #0x14]

	/* Run TO 3.0 at Full speed, for other TO's wait till we increase VDDGP */
	mov r0, #CONFIG_SYS_ARM_PODF
	str r0, [rClk, #CLKCTL_CACRR]

	/* setup the rest */
	/* Use lp_apm (24MHz) source for perclk */
	ldr r0, =0x000020C2
	str r0, [rClk, #CLKCTL_CBCMR]
	/* ddr clock from PLL 1, all perclk dividers are 1 since using 24MHz */
	ldr r0, =0x41E35100
	and r2, r2, #(7 << 27)		//keep the initial ddr podf value
	orr r0, r0, r2
	str r0, [rClk, #CLKCTL_CBCDR]

	/* Use PLL2 for UART clock, get 66.5MHz from it */
	ldr r0, =0xA5A2A020
	str r0, [rClk, #CLKCTL_CSCMR1]
	ldr r0, =0x00C30321
	str r0, [rClk, #CLKCTL_CSCDR1]

	divisor_change_wait rClk

	/* Restore the default values in the Gate registers */
	mvn r0, #~0xFFFFFFFF
	str r0, [rClk, #CLKCTL_CCGR0]
	str r0, [rClk, #CLKCTL_CCGR1]
	str r0, [rClk, #CLKCTL_CCGR2]
	str r0, [rClk, #CLKCTL_CCGR3]
	str r0, [rClk, #CLKCTL_CCGR4]
	str r0, [rClk, #CLKCTL_CCGR5]
	str r0, [rClk, #CLKCTL_CCGR6]

	mov r0, #0x0
	str r0, [rClk, #CLKCTL_CCDR]

	/* for cko - for ARM div by 8 */
	mov r0, #0x000A0000
	add r0, r0, #0x00000F0
	str r0, [rClk, #CLKCTL_CCOSR]
.endm

.macro setup_wdog
	ldr r1, =WDOG1_BASE_ADDR
	mov r0, #0x30
	strh r0, [r1]
.endm

.section ".text.init", "x"

#define GPIO_DR 0
#define GPIO_DIR 4

.globl lowlevel_init
lowlevel_init:
	mov	r8, lr
	
	print_debug_ch 'a'
/* make gp1[23] a high output */
	ldr r1, =GPIO1_BASE_ADDR
	ldr r0, [r1, #GPIO_DR]
	orr r0, r0, #(1 << 23)
	str r0, [r1, #GPIO_DR]
	ldr r0, [r1, #GPIO_DIR]
	orr r0, r0, #(1 << 23)
	str r0, [r1, #GPIO_DIR]

#ifdef ENABLE_IMPRECISE_ABORT
        mrs r1, spsr            /* save old spsr */
        mrs r0, cpsr            /* read out the cpsr */
	bic r0, r0, #0x100      /* clear the A bit */
	msr spsr, r0            /* update spsr */
	add lr, pc, #0x8        /* update lr */
        movs pc, lr             /* update cpsr */
        nop
        nop
        nop
	nop
	msr spsr, r1            /* restore old spsr */
#endif

	/* ARM errata ID #468414 */
	mrc 15, 0, r1, c1, c0, 1
	orr r1, r1, #(1 << 5)    /* enable L1NEON bit */
	mcr 15, 0, r1, c1, c0, 1

	print_debug_ch 'b'
	init_l2cc

	print_debug_ch 'c'
	init_aips

	print_debug_ch 'd'
	init_max

	print_debug_ch 'e'
	init_m4if

	print_debug_ch 'f'
	init_drive_strength

//	print_debug_ch 'g'
//	init_disable_ipu

	print_debug_ch 'h'
	init_clock
	bl	setup_uart

	print_debug_ch 'i'
	init_debug_board

	print_debug_ch '\n'
	mov	pc,r8

/* Board level setting value */
DDR_PERCHARGE_CMD:	.word 0x04008008
DDR_REFRESH_CMD:	.word 0x00008010
DDR_LMR1_W:		.word 0x00338018
DDR_LMR_CMD:		.word 0xB2220000
DDR_TIMING_W:		.word 0xB02567A9
DDR_MISC_W:		.word 0x000A0104
